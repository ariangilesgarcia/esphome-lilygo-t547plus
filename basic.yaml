esphome:
  name: lilygo
  platformio_options:
    # Unless noted otherwise, based on https://github.com/Xinyuan-LilyGO/LilyGo-EPD47/blob/1eb6119fc31fcff7a6bafecb09f4225313859fc5/examples/demo/platformio.ini#L37
    upload_speed: 921600
    monitor_speed: 115200
    board_build.mcu: esp32s3
    board_build.f_cpu: 240000000L
    board_build.arduino.memory_type: qspi_opi
    board_build.flash_size: 16MB
    board_build.flash_mode: qio
    board_build.flash_type: qspi
    board_build.psram_type: opi
    board_build.memory_type: qspi_opi
    board_build.boot_freq: 80m
    platform_packages:
      - "toolchain-riscv32-esp @8.4.0+2021r2-patch5"
    build_flags:  # the first three defines are required for the screen library to function.
      - "-DBOARD_HAS_PSRAM"
      - "-DARDUINO_RUNNING_CORE=0"  # TODO: this conflicts with the value from platformio's idedata, spewing a lot of warnings during the build.
      - "-DARDUINO_EVENT_RUNNING_CORE=0"  # and this too
      # In addition to lilygo's settings:
      # To enable reading logs over USB until `hardware_uart: USB_CDC` support
      # is added to `logger:`, as detailed in <https://github.com/esphome/feature-requests/issues/1906>:
      - "-DARDUINO_USB_MODE=1"
      - "-DARDUINO_USB_CDC_ON_BOOT=1"


esp32:
  variant: esp32s3
  board: esp32-s3-devkitc-1

  framework:
    type: arduino
    # Just like in <https://community.home-assistant.io/t/enable-usb-cdc-to-log-hello-world-to-esp32-s3-dev-board-for-esphome/463164/10>
    # I had problems with newer versions; the following combination happens to work, so using it for now.
    version: 2.0.3
    platform_version: 5.1.1


logger:
  level: VERBOSE  # hardware_uart: USB_CDC  # see note about <https://github.com/esphome/feature-requests/issues/1906> above


api:  # Enable Home Assistant API
  password: !secret api_ota_password


ota:
  platform: esphome
  password: !secret api_ota_password


wifi: !include wifi-secrets.yaml


globals:
  - id: initial_update
    type: boolean
    restore_value: no
    initial_value: "false"


sensor:
  - platform: template
    name: "Dollar Rate Compra Sensor"
    id: dollar_rate_compra
  - platform: template
    name: "Dollar Rate Venta Sensor"
    id: dollar_rate_venta


binary_sensor:
  - platform: gpio
    pin:
      number: GPIO21 #was GPIO39 on the previous board
      inverted: true
    name: "Button 1"
    on_press:
      then:
        - display.page.show_next: eink_display
        - component.update: eink_display


# Schedule the HTTP request every 10 seconds
interval:
  - interval: 10s
    then:
      - http_request.get:
          url: https://dolarapi.com/v1/dolares/blue
          capture_response: true
          on_response:
            then:
              - logger.log:
                  format: "Response status: %d, Duration: %u ms, Text: %s"
                  args:
                    - response->status_code
                    - response->duration_ms
                    - body
              - lambda: |-
                  json::parse_json(body, [](JsonObject root) -> bool {
                      id(dollar_rate_compra).publish_state(root["compra"]);
                      id(dollar_rate_venta).publish_state(root["venta"]);

                      // Trigger display update only on the first successful API call
                      if (!id(initial_update)) {  // Access the value directly
                        id(initial_update) = true;  // Directly set the value to true
                        id(eink_display).update();
                      }

                      return true;
                  });


external_components:
  source:
    type: local
    path: components/
  components: ["t547"]


font:
  - id: roboto
    file: "gfonts://Roboto"
    size: 50

  - id: roboto_large
    file: "gfonts://Roboto"
    size: 90

  - id: roboto_small
    file: "gfonts://Roboto"
    size: 34
    glyphs: "$!%()+=,-_.:Â°/?0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz"

  - id: roboto_vsmall
    file: "gfonts://Roboto"
    size: 20

  - id: material_trams
    file: "gfonts://Material+Icons"
    size: 50
    glyphs:
      - "\U0000E571" #tram
      - "\U0000E089" #arrow right
      - "\U0000E8DF" #calendar

  - id: material_large
    file: "gfonts://Material+Icons"
    size: 100
    glyphs:
      - "\U0000E8B5" #clock


time:
  - platform: sntp
    id: ntp


image:
  - file: "images/bg.png"
    id: bg
    resize: 540x960
  - file: "images/book.png"
    id: book_icon
    resize: 100x100
  - file: "images/caca.jpg"
    id: caca_icon
    resize: 250x250
  - file: "images/dollar.jpg"
    id: dollar_icon
    resize: 100x100

http_request:
  id: dollar_rate_request
  timeout: 10s
  verify_ssl: false


display:
  - platform: t547
    id: eink_display
    rotation: 270
    update_interval: 600s
    pages:
      - id: home
        lambda: |-
          // Setup
          it.fill(COLOR_OFF);
          it.image(0,0, id(bg));
          int mid_screen_x = it.get_width()/2;

          // Time & Date
          it.printf(mid_screen_x, 17, id(roboto_large), COLOR_ON, TextAlign::TOP_CENTER, id(ntp).now().strftime("%H:%M").c_str());
          it.printf(mid_screen_x, 120, id(roboto), COLOR_ON, TextAlign::TOP_CENTER, id(ntp).now().strftime("%Y-%m-%d").c_str());

          // Book icon
          int book_icon_w = 100;
          int book_start_x = 520/2 - book_icon_w/2;
          int book_start_y = 250;

          it.image(book_start_x, book_start_y, id(book_icon));

          // Book title
          it.printf(mid_screen_x, 315, id(roboto_small), COLOR_ON, TextAlign::TOP_CENTER, "El guardian entre el centeno");

          // Dollar  icon
          int dollar_icon_w = 100;
          int dollar_start_x = 50;
          int dollar_start_y = 460;

          it.image(dollar_start_x, dollar_start_y, id(dollar_icon));

          // Dollar Rate
          it.printf(200, 500, id(roboto_small), COLOR_ON, TextAlign::BASELINE_LEFT, "Venta: $%.0f", id(dollar_rate_venta).state);
          it.printf(200, 540, id(roboto_small), COLOR_ON, TextAlign::BASELINE_LEFT, "Compra: $%.0f", id(dollar_rate_compra).state);

          // Caca
          int caca_icon_w = 250;
          int caca_start_x = 520/2 - caca_icon_w/2;
          int caca_start_y = 650;

          it.image(caca_start_x, caca_start_y, id(caca_icon));
      - id: dollar_rate
        lambda: |-
          // Setup
          it.fill(COLOR_OFF);
          it.image(0,0, id(bg));
          int mid_screen_x = it.get_width()/2;

          // Dollar  icon
          int dollar_icon_w = 100;
          int dollar_start_x = 50;
          int dollar_start_y = 460;

          it.image(dollar_start_x, dollar_start_y, id(dollar_icon));

          // Dollar Rate
          it.printf(200, 500, id(roboto_small), COLOR_ON, TextAlign::BASELINE_LEFT, "Venta: $%.0f", id(dollar_rate_venta).state);
          it.printf(200, 540, id(roboto_small), COLOR_ON, TextAlign::BASELINE_LEFT, "Compra: $%.0f", id(dollar_rate_compra).state);
